//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Raspberry Pi/Global Assets/PiInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PiInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PiInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PiInputActions"",
    ""maps"": [
        {
            ""name"": ""Pi Car"",
            ""id"": ""3a301537-3b91-4c0a-ad74-b3487ea92ca3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9175ac83-301a-442c-9986-a391ba5d2e90"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LED"",
                    ""type"": ""Button"",
                    ""id"": ""b198c23b-94fa-46b4-8d6f-d451ff0cff84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5645093a-5d74-4465-a73c-10958ec51936"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""8f967568-e3cc-4de6-abc5-1e34151dab72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""628c9000-90c9-4eed-bec6-d07ba5b45f08"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6f837f47-c7fa-4145-aec0-972b659f0318"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""986d1fc4-8db5-429a-98fa-d405ec2742ba"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ae8b13b4-6929-46bc-bd25-ba0e467e8198"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4fa7c4b-0ae9-4bb6-b00a-8ed17ce31f26"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae4bb041-dee4-491b-8e0c-d248b708d345"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ffd9555d-e9cd-47b2-b843-68496b88ad25"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LED"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ad0b41e-3510-4809-ac43-e022893bb590"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LED"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c3f14df-2294-43c0-a962-0e42e3441cdd"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""458291d3-85e9-4efb-a277-b8a65e758952"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pi Car
        m_PiCar = asset.FindActionMap("Pi Car", throwIfNotFound: true);
        m_PiCar_Move = m_PiCar.FindAction("Move", throwIfNotFound: true);
        m_PiCar_LED = m_PiCar.FindAction("LED", throwIfNotFound: true);
        m_PiCar_Pause = m_PiCar.FindAction("Pause", throwIfNotFound: true);
        m_PiCar_Quit = m_PiCar.FindAction("Quit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pi Car
    private readonly InputActionMap m_PiCar;
    private IPiCarActions m_PiCarActionsCallbackInterface;
    private readonly InputAction m_PiCar_Move;
    private readonly InputAction m_PiCar_LED;
    private readonly InputAction m_PiCar_Pause;
    private readonly InputAction m_PiCar_Quit;
    public struct PiCarActions
    {
        private @PiInputActions m_Wrapper;
        public PiCarActions(@PiInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PiCar_Move;
        public InputAction @LED => m_Wrapper.m_PiCar_LED;
        public InputAction @Pause => m_Wrapper.m_PiCar_Pause;
        public InputAction @Quit => m_Wrapper.m_PiCar_Quit;
        public InputActionMap Get() { return m_Wrapper.m_PiCar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PiCarActions set) { return set.Get(); }
        public void SetCallbacks(IPiCarActions instance)
        {
            if (m_Wrapper.m_PiCarActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PiCarActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PiCarActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PiCarActionsCallbackInterface.OnMove;
                @LED.started -= m_Wrapper.m_PiCarActionsCallbackInterface.OnLED;
                @LED.performed -= m_Wrapper.m_PiCarActionsCallbackInterface.OnLED;
                @LED.canceled -= m_Wrapper.m_PiCarActionsCallbackInterface.OnLED;
                @Pause.started -= m_Wrapper.m_PiCarActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PiCarActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PiCarActionsCallbackInterface.OnPause;
                @Quit.started -= m_Wrapper.m_PiCarActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_PiCarActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_PiCarActionsCallbackInterface.OnQuit;
            }
            m_Wrapper.m_PiCarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @LED.started += instance.OnLED;
                @LED.performed += instance.OnLED;
                @LED.canceled += instance.OnLED;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }
        }
    }
    public PiCarActions @PiCar => new PiCarActions(this);
    public interface IPiCarActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLED(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
}
